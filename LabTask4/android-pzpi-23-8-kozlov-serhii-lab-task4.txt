Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії







ЗВІТ
до лабораторної роботи 4 з дисципліни
"Програмування під Android"
на тему "Застосунок для ведення нотаток" 





Виконав ст. гр ПЗПІ-23-8
Козлов Сергій Олександрович


Перевірив 
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович










Харків 2024

    МЕТА
Мета лабораторної полягала у створенні мобільного додатка для ведення нотаток на платформі Android із використанням бази даних SQLite. Головна задача – забезпечити функціональність, яка дозволить користувачам створювати нотатки, редагувати їх, видаляти, здійснювати пошук за назвою, а також додавати зображення та встановлювати рівень важливості для кожної нотатки.
     

     ЗАВДАННЯ
     Для досягнення цієї мети було поставлено кілька завдань. Насамперед, потрібно було розробити структуру бази даних, яка б зберігала всю необхідну інформацію про нотатки, включаючи назву, опис, важливість, дату створення та URI зображення. Окрім цього, потрібно було реалізувати графічний інтерфейс користувача, який дозволяє виконувати основні операції: створення, редагування, видалення нотаток, а також їх пошук. Важливим завданням було інтегрувати можливість додавання зображень до нотаток через галерею пристрою. Для відображення списку нотаток передбачалося використати компонент RecyclerView із відповідним адаптером.
     
     
ХІД РОБОТИ
	Хід роботи складався з кількох основних етапів. Спочатку було спроєктовано базу даних SQLite, створено таблицю notes, яка містила поля для кожного необхідного параметра нотатки. Потім було розроблено графічний інтерфейс користувача. Макети включали головний екран для перегляду списку нотаток, екран для створення нових нотаток і окремий екран для їх редагування. Було використано стандартні елементи інтерфейсу Android, такі як EditText для введення тексту, Spinner для вибору рівня важливості, ImageView для відображення зображень і кнопки для виконання дій. Далі була реалізована функціональність: написано основні класи активностей, такі як MainActivity, Add_note_Activity і Note_edit_Activity, а також клас Note_Adapter, який забезпечив відображення нотаток у списку. Для роботи з базою даних було створено клас Data_Help, який включав усі основні операції, як-от додавання, оновлення, видалення та отримання записів.
     Особливу увагу було приділено роботі з зображеннями. Реалізовано вибір зображення з галереї за допомогою Intent, збереження URI зображення в базі даних і відображення його в інтерфейсі. Також проведено тестування додатка, перевірено коректність функцій додавання, редагування, видалення та пошуку нотаток, а також роботу із зображеннями.


     ВИСНОВКИ
     
     Посилання на відео в You_Tube: https://youtu.be/AQTENAsyvHA
     
     У результаті роботи було створено мобільний додаток, який дозволяє користувачам вести нотатки з додаванням зображень і встановленням важливості. Додаток підтримує збереження даних у базі даних SQLite і забезпечує користувачам зручний інтерфейс для взаємодії з інформацією. Результати тестування показали, що додаток працює стабільно та відповідає поставленим вимогам.
     
     

ВИКОРИСТАННІ ДЖЕРЕЛА

1. YouTube. " Як Зробити Android Додаток з Нуля" https://www.youtube.com/watch?v=p0tmWQIKk4g. 
2. Дата доступу: 7 жовтня 2024 року.
3. Національний університет радіоелектроніки. https://dl.nure.ua/
Дата доступу: 7 жовтня 2024 року.
4. Спільнота Stack Overflow. https://stackoverflow.com/
Дата доступу: 7 жовтня 2024 року.
5. YouTube. “Уроки Java з нуля” 
https://www.youtube.com/watch?v=iF7QpUA_KjE&list=PL7vq4D0vOpQbW4oply2GMQjVeYHNi05-I

























ДОДАТОК А
Add_note_Activity.java

1. package com.example.serhii_kozlov_pzpi_23_8;
 2. 
 3. import android.content.Intent;
 4. import android.net.Uri;
 5. import android.os.Bundle;
 6. import android.provider.MediaStore;
 7. import android.view.View;
 8. import android.widget.Button;
 9. import android.widget.EditText;
10. import android.widget.ImageView;
11. import android.widget.Spinner;
12. import android.widget.Toast;
13. import androidx.annotation.Nullable;
14. import androidx.appcompat.app.AppCompatActivity;
15. 
16. import java.text.SimpleDateFormat;
17. import java.util.Date;
18. import java.util.Locale;
19. 
20. public class Add_note_Activity extends AppCompatActivity {
21. 
22.     private static final int PICK_IMAGE_REQUEST = 1;
23. 
24.     private EditText titleEditText, descriptionEditText;
25.     private Spinner importanceSpinner;
26.     private Button saveButton, selectImageButton;
27.     private ImageView noteImageView;
28.     private Uri imageUri;
29. 
30.     @Override
31.     protected void onCreate(Bundle savedInstanceState) {
32.         super.onCreate(savedInstanceState);
33.         setContentView(R.layout.activity_add_note);
34. 
35.         initializeViews();
36.         setupListeners();
37.     }
38. 
39.     private void initializeViews() {
40.         titleEditText = findViewById(R.id.titleEditText);
41.         descriptionEditText = findViewById(R.id.descriptionEditText);
42.         importanceSpinner = findViewById(R.id.importanceSpinner);
43.         saveButton = findViewById(R.id.saveButton);
44.         selectImageButton = findViewById(R.id.selectImageButton);
45.         noteImageView = findViewById(R.id.noteImageView);
46.     }
47. 
48.     private void setupListeners() {
49.         selectImageButton.setOnClickListener(new View.OnClickListener() {
50.             @Override
51.             public void onClick(View v) {
52.                 openGallery();
53.             }
54.         });
55. 
56.         saveButton.setOnClickListener(new View.OnClickListener() {
57.             @Override
58.             public void onClick(View v) {
59.                 saveNote();
60.             }
61.         });
62.     }
63. 
64.     private void openGallery() {
65.         Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
66.         startActivityForResult(intent, PICK_IMAGE_REQUEST);
67.     }
68. 
69.     @Override
70.     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
71.         super.onActivityResult(requestCode, resultCode, data);
72.         if (isImageSelected(requestCode, resultCode, data)) {
73.             imageUri = data.getData();
74.             noteImageView.setImageURI(imageUri);
75.         }
76.     }
77. 
78.     private boolean isImageSelected(int requestCode, int resultCode, @Nullable Intent data) {
79.         return requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null && data.getData() != null;
80.     }
81. 
82.     private void saveNote() {
83.         String title = titleEditText.getText().toString().trim();
84.         String description = descriptionEditText.getText().toString().trim();
85.         int importance = importanceSpinner.getSelectedItemPosition();
86.         String dateTime = getCurrentDateTime();
87.         String imageUriString = (imageUri != null) ? imageUri.toString() : "";
88. 
89.         if (areFieldsEmpty(title, description)) {
90.             Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
91.         } else {
92.             saveNoteToDatabase(title, description, importance, dateTime, imageUriString);
93.         }
94.     }
95. 
96.     private boolean areFieldsEmpty(String title, String description) {
97.         return title.isEmpty() || description.isEmpty();
98.     }
99. 
100.    private void saveNoteToDatabase(String title, String description, int importance, String dateTime, String imageUriString) {
101.        Data_Help dbHelper = new Data_Help(this);
102.        long noteId = dbHelper.addNote(title, description, importance, dateTime, imageUriString);
103. 
104.        if (noteId != -1) {
105.            Toast.makeText(this, "Note added successfully", Toast.LENGTH_SHORT).show();
106.            finish();
107.        } else {
108.            Toast.makeText(this, "Error adding note", Toast.LENGTH_SHORT).show();
109.        }
110.    }
111. 
112.    private String getCurrentDateTime() {
113.        return new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(new Date());
114.    }
115. }





ДОДАТОК Б
Data_Help.java

1. package com.example.serhii_kozlov_pzpi_23_8;
 2. 
 3. import android.content.ContentValues;
 4. import android.content.Context;
 5. import android.database.Cursor;
 6. import android.database.sqlite.SQLiteDatabase;
 7. import android.database.sqlite.SQLiteOpenHelper;
 8. import android.net.Uri;
 9. 
10. import java.util.ArrayList;
11. import java.util.List;
12. 
13. public class Data_Help extends SQLiteOpenHelper {
14. 
15.     private static final String DATABASE_NAME = "notes.db";
16.     private static final int DATABASE_VERSION = 1;
17.     public static final String TABLE_NOTES = "notes";
18.     public static final String COLUMN_ID = "id";
19.     public static final String COLUMN_TITLE = "title";
20.     public static final String COLUMN_DESCRIPTION = "description";
21.     public static final String COLUMN_IMPORTANCE = "importance";
22.     public static final String COLUMN_DATE_TIME = "dateTime";
23.     public static final String COLUMN_IMAGE_URI = "imageUri";
24. 
25.     public Data_Help(Context context) {
26.         super(context, DATABASE_NAME, null, DATABASE_VERSION);
27.     }
28. 
29.     @Override
30.     public void onCreate(SQLiteDatabase db) {
31.         String createTableQuery = "CREATE TABLE " + TABLE_NOTES + " ("
32.                 + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
33.                 + COLUMN_TITLE + " TEXT, "
34.                 + COLUMN_DESCRIPTION + " TEXT, "
35.                 + COLUMN_IMPORTANCE + " INTEGER, "
36.                 + COLUMN_DATE_TIME + " TEXT, "
37.                 + COLUMN_IMAGE_URI + " TEXT)";
38.         db.execSQL(createTableQuery);
39.     }
40. 
41.     @Override
42.     public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
43.         db.execSQL("DROP TABLE IF EXISTS " + TABLE_NOTES);
44.         onCreate(db);
45.     }
46. 
47.     public List<Note> getAllNotes() {
48.         List<Note> notesList = new ArrayList<>();
49.         SQLiteDatabase db = this.getReadableDatabase();
50.         Cursor cursor = db.rawQuery("SELECT * FROM " + TABLE_NOTES, null);
51. 
52.         if (cursor != null && cursor.moveToFirst()) {
53.             do {
54.                 int idIndex = cursor.getColumnIndex(COLUMN_ID);
55.                 int titleIndex = cursor.getColumnIndex(COLUMN_TITLE);
56.                 int descriptionIndex = cursor.getColumnIndex(COLUMN_DESCRIPTION);
57.                 int importanceIndex = cursor.getColumnIndex(COLUMN_IMPORTANCE);
58.                 int dateTimeIndex = cursor.getColumnIndex(COLUMN_DATE_TIME);
59.                 int imageUriIndex = cursor.getColumnIndex(COLUMN_IMAGE_URI);
60. 
61.                 if (idIndex != -1 && titleIndex != -1 && descriptionIndex != -1 &&
62.                         importanceIndex != -1 && dateTimeIndex != -1 && imageUriIndex != -1) {
63. 
64.                     long id = cursor.getLong(idIndex);
65.                     String title = cursor.getString(titleIndex);
66.                     String description = cursor.getString(descriptionIndex);
67.                     int importance = cursor.getInt(importanceIndex);
68.                     String dateTime = cursor.getString(dateTimeIndex);
69.                     String imageUriString = cursor.getString(imageUriIndex);
70. 
71.                     Uri imageUri = null;
72.                     if (imageUriString != null && !imageUriString.isEmpty()) {
73.                         try {
74.                             imageUri = Uri.parse(imageUriString);
75.                         } catch (Exception e) {
76.                             e.printStackTrace();
77.                         }
78.                     }
79. 
80.                     Note note = new Note(id, title, description, importance, dateTime, imageUri);
81.                     notesList.add(note);
82.                 }
83. 
84.             } while (cursor.moveToNext());
85. 
86.             cursor.close();
87.         }
88.         db.close();
89.         return notesList;
90.     }
91. 
92.     public void deleteAllNotes() {
93.         SQLiteDatabase db = this.getWritableDatabase();
94.         db.delete(TABLE_NOTES, null, null);
95.         db.close();
96.     }
97. 
98.     public long addNote(String title, String description, int importance, String dateTime, String imageUri) {
99.         SQLiteDatabase db = this.getWritableDatabase();
100.        ContentValues values = new ContentValues();
101.        values.put(COLUMN_TITLE, title);
102.        values.put(COLUMN_DESCRIPTION, description);
103.        values.put(COLUMN_IMPORTANCE, importance);
104.        values.put(COLUMN_DATE_TIME, dateTime);
105.        values.put(COLUMN_IMAGE_URI, imageUri);
106. 
107.        long id = db.insert(TABLE_NOTES, null, values);
108.        db.close();
109.        return id;
110.    }
111. 
112.    public int updateNote(long id, String title, String description, int importance, String dateTime, String imageUri) {
113.        SQLiteDatabase db = this.getWritableDatabase();
114.        ContentValues values = new ContentValues();
115.        values.put(COLUMN_TITLE, title);
116.        values.put(COLUMN_DESCRIPTION, description);
117.        values.put(COLUMN_IMPORTANCE, importance);
118.        values.put(COLUMN_DATE_TIME, dateTime);
119.        values.put(COLUMN_IMAGE_URI, imageUri);
120. 
121.        int rowsAffected = db.update(TABLE_NOTES, values, COLUMN_ID + " = ?", new String[]{String.valueOf(id)});
122.        db.close();
123.        return rowsAffected;
124.    }
125. 
126.    public void deleteNote(long id) {
127.        SQLiteDatabase db = this.getWritableDatabase();
128.        db.delete(TABLE_NOTES, COLUMN_ID + " = ?", new String[]{String.valueOf(id)});
129.        db.close();
130.    }
131. }

ДОДАТОК В
MainActivity.java

  1. package com.example.serhii_kozlov_pzpi_23_8;
  2. 
  3. import android.Manifest;
  4. import android.content.Intent;
  5. import android.content.pm.PackageManager;
  6. import android.net.Uri;
  7. import android.os.Build;
  8. import android.os.Bundle;
  9. import android.text.Editable;
 10. import android.text.TextWatcher;
 11. import android.widget.EditText;
 12. import android.widget.Toast;
 13. 
 14. import androidx.activity.result.ActivityResultLauncher;
 15. import androidx.activity.result.contract.ActivityResultContracts;
 16. import androidx.annotation.Nullable;
 17. import androidx.appcompat.app.AppCompatActivity;
 18. import androidx.core.content.ContextCompat;
 19. import androidx.recyclerview.widget.LinearLayoutManager;
 20. import androidx.recyclerview.widget.RecyclerView;
 21. 
 22. import java.util.ArrayList;
 23. 
 24. public class MainActivity extends AppCompatActivity implements Note_Adapter.OnNoteClickListener {
 25. 
 26.     private static final int PICK_IMAGE_REQUEST = 1;
 27.     private static final int ADD_NOTE_REQUEST_CODE = 1;
 28.     private static final int EDIT_NOTE_REQUEST_CODE = 2;
 29. 
 30.     private RecyclerView recyclerView;
 31.     private Note_Adapter adapter;
 32.     private ArrayList<Note> notesList = new ArrayList<>();
 33.     private ArrayList<Note> originalNotesList = new ArrayList<>();
 34.     private Data_Help databaseHelper;
 35.     private Uri imageUri;
 36.     private EditText searchEditText;
 37. 
 38.     private ActivityResultLauncher<String> requestPermissionLauncher =
 39.             registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
 40.                 if (isGranted) {
 41.                     updateNotesList();
 42.                 } else {
 43.                     Toast.makeText(this, "Permission denied. Cannot load images.", Toast.LENGTH_SHORT).show();
 44.                 }
 45.             });
 46. 
 47.     @Override
 48.     protected void onCreate(Bundle savedInstanceState) {
 49.         super.onCreate(savedInstanceState);
 50.         setContentView(R.layout.activity_main);
 51. 
 52.         checkAndRequestPermissions();
 53. 
 54.         recyclerView = findViewById(R.id.recyclerView);
 55.         databaseHelper = new Data_Help(this);
 56.         recyclerView.setLayoutManager(new LinearLayoutManager(this));
 57.         adapter = new Note_Adapter(this, notesList, this);
 58.         recyclerView.setAdapter(adapter);
 59. 
 60.         findViewById(R.id.addNoteButton).setOnClickListener(v -> openAddNoteActivity());
 61. 
 62.         searchEditText = findViewById(R.id.searchEditText);
 63.         searchEditText.addTextChangedListener(new TextWatcher() {
 64.             @Override
 65.             public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
 66. 
 67.             @Override
 68.             public void onTextChanged(CharSequence s, int start, int before, int count) {
 69.                 filterNotes(s.toString());
 70.             }
 71. 
 72.             @Override
 73.             public void afterTextChanged(Editable s) {}
 74.         });
 75.     }
 76. 
 77.     private void checkAndRequestPermissions() {
 78.         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
 79.             if (ContextCompat.checkSelfPermission(
 80.                     this, Manifest.permission.READ_MEDIA_IMAGES) !=
 81.                     PackageManager.PERMISSION_GRANTED) {
 82.                 requestPermissionLauncher.launch(Manifest.permission.READ_MEDIA_IMAGES);
 83.             }
 84.         } else {
 85.             if (ContextCompat.checkSelfPermission(
 86.                     this, Manifest.permission.READ_EXTERNAL_STORAGE) !=
 87.                     PackageManager.PERMISSION_GRANTED) {
 88.                 requestPermissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE);
 89.             }
 90.         }
 91.     }
 92. 
 93.     private void filterNotes(String searchText) {
 94.         if (originalNotesList.isEmpty()) {
 95.             originalNotesList.addAll(notesList);
 96.         }
 97. 
 98.         notesList.clear();
 99. 
100.         if (searchText.isEmpty()) {
101.             notesList.addAll(originalNotesList);
102.         } else {
103.             for (Note note : originalNotesList) {
104.                 if (note.getTitle().toLowerCase().contains(searchText.toLowerCase())) {
105.                     notesList.add(note);
106.                 }
107.             }
108.         }
109. 
110.         adapter.notifyDataSetChanged();
111.     }
112. 
113.     private void updateNotesList() {
114.         notesList.clear();
115.         originalNotesList.clear();
116.         notesList.addAll(databaseHelper.getAllNotes());
117.         originalNotesList.addAll(notesList);
118.         adapter.notifyDataSetChanged();
119.     }
120. 
121.     @Override
122.     protected void onStart() {
123.         super.onStart();
124.         updateNotesList();
125.     }
126. 
127.     private void openAddNoteActivity() {
128.         Intent intent = new Intent(this, Add_note_Activity.class);
129.         startActivityForResult(intent, ADD_NOTE_REQUEST_CODE);
130.     }
131. 
132.     @Override
133.     public void onNoteClick(Note note) {
134.         Intent intent = new Intent(this, Note_edit_Activity.class);
135.         intent.putExtra("note_id", note.getId());
136.         intent.putExtra("title", note.getTitle());
137.         intent.putExtra("description", note.getDescription());
138.         intent.putExtra("importance", note.getImportance());
139.         intent.putExtra("image_uri", note.getImageUri() != null ? note.getImageUri().toString() : "");
140. 
141.         startActivityForResult(intent, EDIT_NOTE_REQUEST_CODE);
142.     }
143. 
144.     @Override
145.     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
146.         super.onActivityResult(requestCode, resultCode, data);
147. 
148.         if (requestCode == PICK_IMAGE_REQUEST && resultCode == RESULT_OK && data != null) {
149.             imageUri = data.getData();
150.         }
151. 
152.         if ((requestCode == ADD_NOTE_REQUEST_CODE || requestCode == EDIT_NOTE_REQUEST_CODE)
153.                 && resultCode == RESULT_OK) {
154.             updateNotesList();
155.         }
156.     }
157. }




ДОДАТОК Г
Note.java

1. package com.example.serhii_kozlov_pzpi_23_8;
2. 
3. import android.net.Uri;
4. 
5. public class Note {
6.     private long id;
7.     private String title;
8.     private String description;
9.     private int importance;
10.    private String dateTime;
11.    private Uri imageUri;
12. 
13.    public Note(long id, String title, String description, int importance, String dateTime, Uri imageUri) {
14.        this.id = id;
15.        this.title = title;
16.        this.description = description;
17.        this.importance = importance;
18.        this.dateTime = dateTime;
19.        this.imageUri = imageUri;
20.    }
21. 
22.    public int getImportance() {
23.        return importance;
24.    }
25. 
26.    public String getDescription() {
27.        return description;
28.    }
29. 
30.    public long getId() {
31.        return id;
32.    }
33. 
34.    public String getTitle() {
35.        return title;
36.    }
37. 
38.    public String getDateTime() {
39.        return dateTime;
40.    }
41. 
42.    public Uri getImageUri() {
43.        return imageUri;
44.    }
45. }


ДОДАТОК Д
Note_Adapter.java

1.  package com.example.serhii_kozlov_pzpi_23_8;
2.  
3.  import android.content.Context;
4.  import android.graphics.Bitmap;
5.  import android.provider.MediaStore;
6.  import android.view.LayoutInflater;
7.  import android.view.View;
8.  import android.view.ViewGroup;
9.  import android.widget.ImageView;
10. import android.widget.TextView;
11. 
12. import androidx.annotation.NonNull;
13. import androidx.recyclerview.widget.RecyclerView;
14. 
15. import java.io.IOException;
16. import java.util.ArrayList;
17. 
18. public class Note_Adapter extends RecyclerView.Adapter<Note_Adapter.NoteViewHolder> {
19. 
20.     private Context context;
21.     private ArrayList<Note> notesList;
22.     private OnNoteClickListener onNoteClickListener;
23. 
24.     public Note_Adapter(Context context, ArrayList<Note> notesList, OnNoteClickListener onNoteClickListener) {
25.         this.context = context;
26.         this.notesList = notesList;
27.         this.onNoteClickListener = onNoteClickListener;
28.     }
29. 
30.     @NonNull
31.     @Override
32.     public NoteViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
33.         View view = LayoutInflater.from(context).inflate(R.layout.note_item, parent, false);
34.         return new NoteViewHolder(view);
35.     }
36. 
37.     @Override
38.     public void onBindViewHolder(@NonNull NoteViewHolder holder, int position) {
39.         Note note = notesList.get(position);
40.         holder.title.setText(note.getTitle());
41.         holder.description.setText(note.getDescription());
42.         holder.dateTime.setText(note.getDateTime());
43. 
44.         if (note.getImageUri() != null) {
45.             try {
46.                 Bitmap bitmap = MediaStore.Images.Media.getBitmap(context.getContentResolver(), note.getImageUri());
47.                 holder.image.setImageBitmap(bitmap);
48.             } catch (IOException e) {
49.                 holder.image.setImageResource(R.drawable.ic_launcher_background);
50.                 e.printStackTrace();
51.             }
52.         } else {
53.             holder.image.setImageResource(R.drawable.ic_launcher_background);
54.         }
55. 
56.         holder.importance.setImageResource(getImportanceIcon(note.getImportance()));
57. 
58.         holder.itemView.setOnClickListener(v -> onNoteClickListener.onNoteClick(note));
59.     }
60. 
61.     public interface OnNoteClickListener {
62.         void onNoteClick(Note note);
63.     }
64. 
65.     public static class NoteViewHolder extends RecyclerView.ViewHolder {
66. 
67.         TextView title, description, dateTime;
68.         ImageView image, importance;
69. 
70.         public NoteViewHolder(View itemView) {
71.             super(itemView);
72.             title = itemView.findViewById(R.id.title);
73.             description = itemView.findViewById(R.id.description);
74.             dateTime = itemView.findViewById(R.id.dateTime);
75.             image = itemView.findViewById(R.id.image);
76.             importance = itemView.findViewById(R.id.importance);
77.         }
78.     }
79. 
80.     @Override
81.     public int getItemCount() {
82.         return notesList.size();
83.     }
84. 
85.     private int getImportanceIcon(int importance) {
86.         switch (importance) {
87.             case 1:
88.                 return R.drawable.low_importance;
89.             case 2:
90.                 return R.drawable.medium_importance;
91.             case 3:
92.                 return R.drawable.high_importance;
93.             default:
94.                 return R.drawable.low_importance;
95.         }
96.     }
97. }


ДОДАТОК Е
Note_edit_Activity.java

1.  package com.example.serhii_kozlov_pzpi_23_8;
2.  
3.  import android.content.Intent;
4.  import android.net.Uri;
5.  import android.os.Bundle;
6.  import android.provider.MediaStore;
7.  import android.widget.Button;
8.  import android.widget.EditText;
9.  import android.widget.ImageView;
10. import android.widget.Spinner;
11. import android.widget.Toast;
12. 
13. import androidx.annotation.Nullable;
14. import androidx.appcompat.app.AppCompatActivity;
15. 
16. public class Note_edit_Activity extends AppCompatActivity {
17. 
18.     private static final int PICK_IMAGE_REQUEST = 1;
19. 
20.     private EditText titleEditText, descriptionEditText;
21.     private Spinner importanceSpinner;
22.     private Button saveButton, selectImageButton, deleteButton;
23.     private ImageView noteImageView;
24.     private Uri imageUri;
25.     private Data_Help dbHelper;
26.     private long noteId;
27. 
28.     @Override
29.     protected void onCreate(Bundle savedInstanceState) {
30.         super.onCreate(savedInstanceState);
31.         setContentView(R.layout.activity_edit_note);
32. 
33.         dbHelper = new Data_Help(this);
34. 
35.         titleEditText = findViewById(R.id.titleEditText);
36.         descriptionEditText = findViewById(R.id.descriptionEditText);
37.         importanceSpinner = findViewById(R.id.importanceSpinner);
38.         saveButton = findViewById(R.id.saveButton);
39.         selectImageButton = findViewById(R.id.selectImageButton);
40.         deleteButton = findViewById(R.id.deleteButton);
41.         noteImageView = findViewById(R.id.noteImageView);
42. 
43.         Intent intent = getIntent();
44.         noteId = intent.getLongExtra("note_id", -1);
45.         String title = intent.getStringExtra("title");
46.         String description = intent.getStringExtra("description");
47.         int importance = intent.getIntExtra("importance", 0);
48.         String imageUriString = intent.getStringExtra("image_uri");
49. 
50.         titleEditText.setText(title);
51.         descriptionEditText.setText(description);
52.         importanceSpinner.setSelection(importance);
53. 
54.         if (imageUriString != null && !imageUriString.isEmpty()) {
55.             imageUri = Uri.parse(imageUriString);
56.             noteImageView.setImageURI(imageUri);
57.         }
58. 
59.         selectImageButton.setOnClickListener(v -> openGallery());
60.         saveButton.setOnClickListener(v -> updateNote());
61.         deleteButton.setOnClickListener(v -> deleteNote());
62.     }
63. 
64.     private void openGallery() {
65.         Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
66.         startActivityForResult(intent, PICK_IMAGE_REQUEST);
67.     }
68. 
69.     private void updateNote() {
70.         String title = titleEditText.getText().toString().trim();
71.         String description = descriptionEditText.getText().toString().trim();
72.         int importance = importanceSpinner.getSelectedItemPosition();
73.         String dateTime = getCurrentDateTime(); // Получение текущей даты
74.         String imageUriString = (imageUri != null) ? imageUri.toString() : "";
75. 
76.         if (title.isEmpty() || description.isEmpty()) {
77.             Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
78.             return;
79.         }
80. 
81.         int rowsAffected = dbHelper.updateNote(noteId, title, description, importance, dateTime, imageUriString);
82. 
83.         if (rowsAffected > 0) {
84.             Toast.makeText(this, "Note updated successfully", Toast.LENGTH_SHORT).show();
85.             Intent resultIntent = new Intent();
86.             setResult(RESULT_OK, resultIntent);
87.             finish();
88.         } else {
89.             Toast.makeText(this, "Error updating note", Toast.LENGTH_SHORT).show();
90.         }
91.     }
92. 
93.     private void deleteNote() {
94.         dbHelper.deleteNote(noteId);
95.         Toast.makeText(this, "Note deleted", Toast.LENGTH_SHORT).show();
96.         Intent resultIntent = new Intent();
97.         setResult(RESULT_OK, resultIntent);
98.         finish();
99.     }
100. 
101.     private String getCurrentDateTime() {
102.         java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm");
103.         return sdf.format(new java.util.Date());
104.     }
105. }





ДОДАТОК Ж
activity_add_note.xml

1. <LinearLayout
2.     xmlns:android="http://schemas.android.com/apk/res/android"
3.     android:layout_width="match_parent"
4.     android:layout_height="match_parent"
5.     android:orientation="vertical"
6.     android:padding="16dp">

7.     <EditText
8.         android:id="@+id/titleEditText"
9.         android:layout_width="match_parent"
10.         android:layout_height="48dp"
11.         android:hint="Назва"
12.         android:inputType="text"
13.         android:padding="8dp"/>

14.     <EditText
15.         android:id="@+id/descriptionEditText"
16.         android:layout_width="match_parent"
17.         android:layout_height="48dp"
18.         android:hint="Опис"
19.         android:inputType="textMultiLine"
20.         android:lines="3"
21.         android:padding="8dp"/>

22.     <Spinner
23.         android:id="@+id/importanceSpinner"
24.         android:layout_width="match_parent"
25.         android:layout_height="48dp"
26.         android:padding="8dp"/>

27.     <Button
28.         android:id="@+id/selectImageButton"
29.         android:layout_width="match_parent"
30.         android:layout_height="wrap_content"
31.         android:backgroundTint="#4CAF50"
32.         android:text="Додати картинку"
33.         android:textSize="34sp" />

34.     <ImageView
35.         android:id="@+id/noteImageView"
36.         android:layout_width="match_parent"
37.         android:layout_height="320dp"
38.         android:layout_marginTop="8dp"
39.         android:scaleType="centerCrop" />

40.     <Button
41.         android:id="@+id/saveButton"
42.         android:layout_width="match_parent"
43.         android:layout_height="wrap_content"
44.         android:backgroundTint="#4CAF50"
45.         android:foregroundTint="#4CAF50"
46.         android:text="Зберегти"
47.         android:textColorLink="#4CAF50"
48.         android:textSize="34sp" />

49. </LinearLayout>



ДОДАТОК З
activity_edit_note.xml


1. <LinearLayout
2.     xmlns:android="http://schemas.android.com/apk/res/android"
3.     android:layout_width="match_parent"
4.     android:layout_height="match_parent"
5.     android:orientation="vertical"
6.     android:padding="16dp">

7.     <EditText
8.         android:id="@+id/titleEditText"
9.         android:layout_width="match_parent"
10.         android:layout_height="48dp"
11.         android:hint="Назва"
12.         android:inputType="text"
13.         android:padding="8dp"/>

14.     <EditText
15.         android:id="@+id/descriptionEditText"
16.         android:layout_width="match_parent"
17.         android:layout_height="48dp"
18.         android:hint="Опис"
19.         android:inputType="textMultiLine"
20.         android:lines="3"
21.         android:padding="8dp"/>

22.     <Spinner
23.         android:id="@+id/importanceSpinner"
24.         android:layout_width="match_parent"
25.         android:layout_height="48dp"
26.         android:padding="8dp"/>

27.     <Button
28.         android:id="@+id/selectImageButton"
29.         android:layout_width="match_parent"
30.         android:layout_height="wrap_content"
31.         android:backgroundTint="#7CB342"
32.         android:text="Змінити картинку"
33.         android:textColor="#FFFFFF" />

34.     <ImageView
35.         android:id="@+id/noteImageView"
36.         android:layout_width="match_parent"
37.         android:layout_height="200dp"
38.         android:layout_marginTop="8dp"
39.         android:scaleType="centerCrop" />

40.     <LinearLayout
41.         android:layout_width="match_parent"
42.         android:layout_height="0dp"
43.         android:layout_weight="1">

44.     </LinearLayout>

45.     <LinearLayout
46.         android:layout_width="match_parent"
47.         android:layout_height="wrap_content"
48.         android:orientation="vertical"
49.         android:gravity="center_horizontal">

50.         <Button
51.             android:id="@+id/saveButton"
52.             android:layout_width="375dp"
53.             android:layout_height="61dp"
54.             android:backgroundTint="#7CB342"
55.             android:text="Змінити" />

56.         <Button
57.             android:id="@+id/deleteButton"
58.             android:layout_width="375dp"
59.             android:layout_height="wrap_content"
60.             android:backgroundTint="@android:color/holo_red_light"
61.             android:text="Видалити" />
62.     </LinearLayout>

63. </LinearLayout>


ДОДАТОК К
activity_main.xml

1. <?xml version="1.0" encoding="utf-8"?>
2. <androidx.constraintlayout.widget.ConstraintLayout
3.     xmlns:android="http://schemas.android.com/apk/res/android"
4.     xmlns:app="http://schemas.android.com/apk/res-auto"
5.     xmlns:tools="http://schemas.android.com/tools"
6.     android:layout_width="match_parent"
7.     android:layout_height="match_parent"
8.     tools:context=".MainActivity">

9.     <EditText
10.         android:id="@+id/searchEditText"
11.         android:layout_width="0dp"
12.         android:layout_height="wrap_content"
13.         android:background="@android:color/white"
14.         android:backgroundTint="#FFFFFF"
15.         android:hint="Пошук"
16.         android:padding="12dp"
17.         android:textColor="#000000"
18.         app:layout_constraintEnd_toEndOf="parent"
19.         app:layout_constraintHorizontal_bias="0.0"
20.         app:layout_constraintStart_toStartOf="parent"
21.         app:layout_constraintTop_toTopOf="parent" />

22.     <androidx.recyclerview.widget.RecyclerView
23.         android:id="@+id/recyclerView"
24.         android:layout_width="0dp"
25.         android:layout_height="0dp"
26.         android:background="@android:color/white"
27.         app:layout_constraintBottom_toBottomOf="parent"
28.         app:layout_constraintEnd_toEndOf="parent"
29.         app:layout_constraintHorizontal_bias="0.0"
30.         app:layout_constraintStart_toStartOf="parent"
31.         app:layout_constraintTop_toBottomOf="@+id/searchEditText"
32.         app:layout_constraintVertical_bias="0.0" />

33.     <Button
34.         android:id="@+id/addNoteButton"
35.         android:layout_width="394dp"
36.         android:layout_height="48dp"
37.         android:layout_marginBottom="36dp"
38.         android:backgroundTint="#4CAF50"
39.         android:text="Додати нотатку"
40.         app:layout_constraintBottom_toBottomOf="parent"
41.         app:layout_constraintEnd_toEndOf="parent"
42.         app:layout_constraintHorizontal_bias="0.497"
43.         app:layout_constraintStart_toStartOf="parent" />

44. </androidx.constraintlayout.widget.ConstraintLayout>\



ДОДАТОК Л
note_item.xml

1. <?xml version="1.0" encoding="utf-8"?>
2. <androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
3.     xmlns:app="http://schemas.android.com/apk/res-auto"
4.     xmlns:tools="http://schemas.android.com/tools"
5.     android:layout_width="match_parent"
6.     android:layout_height="wrap_content"
7.     android:layout_margin="8dp"
8.     android:backgroundTint="#D1BFBF"
9.     app:cardCornerRadius="4dp"
10.     app:cardElevation="2dp">

11.     <LinearLayout
12.         android:layout_width="match_parent"
13.         android:layout_height="wrap_content"
14.         android:background="#000000"
15.         android:orientation="horizontal"
16.         android:padding="16dp">

17.         <ImageView
18.             android:id="@+id/image"
19.             android:layout_width="80dp"
20.             android:layout_height="80dp"
21.             android:layout_marginEnd="16dp"
22.             android:contentDescription="Note Image"
23.             android:src="@drawable/ic_launcher_background" />

24.         <LinearLayout
25.             android:layout_width="0dp"
26.             android:layout_height="match_parent"
27.             android:layout_weight="1"
28.             android:orientation="vertical">

29.             <TextView
30.                 android:id="@+id/title"
31.                 android:layout_width="wrap_content"
32.                 android:layout_height="wrap_content"
33.                 android:text="Note Title"
34.                 android:textColor="#FFFEFE"
35.                 android:textSize="18sp"
36.                 android:textStyle="bold" />

37.             <TextView
38.                 android:id="@+id/description"
39.                 android:layout_width="wrap_content"
40.                 android:layout_height="wrap_content"
41.                 android:layout_marginTop="4dp"
42.                 android:text="Note Description"
43.                 android:textColor="#FFFFFF"
44.                 android:textSize="14sp" />

45.             <TextView
46.                 android:id="@+id/dateTime"
47.                 android:layout_width="wrap_content"
48.                 android:layout_height="wrap_content"
49.                 android:layout_marginTop="8dp"
50.                 android:text="Date and Time"
51.                 android:textColor="@color/white"
52.                 android:textSize="12sp" />
53.         </LinearLayout>

54.         <ImageView
55.             android:id="@+id/importance"
56.             android:layout_width="32dp"
57.             android:layout_height="32dp"
58.             android:layout_gravity="center_vertical"
59.             android:contentDescription="Importance Icon"
60.             android:src="@drawable/star" />

61.     </LinearLayout>
62. </androidx.cardview.widget.CardView>













2


